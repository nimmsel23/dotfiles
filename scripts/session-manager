#!/bin/bash

# Main Session Manager v4.0 - Complete Interface
# Classic bash implementation with full features

# Configuration
DOTFILES_DIR="${HOME}/.dotfiles"
SESSION_MANAGER_VERSION="4.0-COMPLETE"

# Source common functions
if [ -f "${DOTFILES_DIR}/scripts/utils/common.sh" ]; then
    source "${DOTFILES_DIR}/scripts/utils/common.sh"
else
    # Fallback minimal functions
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
    
    log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
    success() { echo -e "${GREEN}✅ $1${NC}"; }
    error() { echo -e "${RED}❌ $1${NC}"; }
    warning() { echo -e "${YELLOW}⚠️ $1${NC}"; }
fi

# Desktop environment detection with launch commands
detect_desktops() {
    local -A desktops=(
        ["startplasma-wayland"]="1:KDE Plasma (Wayland):startplasma-wayland"
        ["sway"]="2:Sway:sway"
        ["Hyprland"]="3:Hyprland:Hyprland"
        ["cosmic-session"]="4:COSMIC Desktop:cosmic-session"
        ["startxfce4"]="5:XFCE:startx /usr/bin/startxfce4"
        ["i3"]="6:i3:startx /usr/bin/i3"
    )
    
    for cmd in "${!desktops[@]}"; do
        if command -v "$cmd" >/dev/null 2>&1; then
            echo "${desktops[$cmd]}"
        fi
    done
}

# CLI tools detection
detect_tools() {
    local -A tools=(
        ["calcurse"]="c:Calendar (calcurse):calcurse"
        ["taskwarrior-tui"]="t:Tasks:taskwarrior-tui"
        ["btop"]="b:System Monitor (btop):btop"
        ["ranger"]="r:File Manager (ranger):ranger"
        ["nvim"]="v:Neovim Editor:nvim"
    )
    
    for cmd in "${!tools[@]}"; do
        if command -v "$cmd" >/dev/null 2>&1; then
            echo "${tools[$cmd]}"
        fi
    done
}

# System information display
get_system_info() {
    local hostname=$(hostname)
    local uptime=$(uptime -p 2>/dev/null || echo "unknown")
    local load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//' 2>/dev/null || echo "0.0")
    local memory=$(free | awk '/^Mem:/ {printf "%.1f", $3/$2 * 100.0}' 2>/dev/null || echo "0")
    
    echo "Host: $hostname | Up: $uptime | Load: $load | RAM: ${memory}%"
}

# Main menu display
show_menu() {
    clear
    
    echo "╔═══════════════════════════════════════════════════════════════════╗"
    echo "║                  SESSION MANAGER v$SESSION_MANAGER_VERSION                  ║"
    echo "╚═══════════════════════════════════════════════════════════════════╝"
    echo ""
    echo "$(get_system_info)"
    echo ""
    
    # Desktop Environments
    local -a desktops
    readarray -t desktops < <(detect_desktops)
    
    if [ ${#desktops[@]} -gt 0 ]; then
        echo "🖥️  Desktop Environments:"
        for desktop in "${desktops[@]}"; do
            local num="${desktop%%:*}"
            local name=$(echo "$desktop" | cut -d: -f2)
            echo "  [$num] $name"
        done
        echo ""
    fi
    
    # CLI Tools
    local -a tools
    readarray -t tools < <(detect_tools)
    
    if [ ${#tools[@]} -gt 0 ]; then
        echo "🛠️  CLI Tools:"
        for tool in "${tools[@]}"; do
            local key="${tool%%:*}"
            local name=$(echo "$tool" | cut -d: -f2)
            echo "  [$key] $name"
        done
        echo ""
    fi
    
    # System Actions
    echo "🔧 System Actions:"
    echo "  [R] Recovery Wizard        [S] System Status"
    echo "  [T] Telegram Setup         [F] Fast Mode"
    echo "  [M] Modular Mode           [U] TUI Interface"
    echo "  [B] System Scripts         [I] System Info"
    echo ""
    
    echo "┌─────────────────────────────────────────────────────────────────────┐"
    echo "│  [q] Exit to bash    [0] Logout    [?] Help                        │"
    echo "└─────────────────────────────────────────────────────────────────────┘"
}

# Launch desktop environment
launch_desktop() {
    local -a desktops
    readarray -t desktops < <(detect_desktops)
    
    for desktop in "${desktops[@]}"; do
        local num="${desktop%%:*}"
        local name=$(echo "$desktop" | cut -d: -f2)
        local cmd=$(echo "$desktop" | cut -d: -f3)
        
        if [ "$1" = "$num" ]; then
            log "Starting $name..."
            
            # Set environment variables based on desktop type
            case "$name" in
                *"Wayland"*|*"Sway"*|*"Hyprland"*|*"COSMIC"*)
                    export XDG_SESSION_TYPE=wayland
                    [ "$name" = *"KDE"* ] && export QT_QPA_PLATFORM=wayland
                    ;;
                *)
                    export XDG_SESSION_TYPE=x11
                    ;;
            esac
            
            exec $cmd
        fi
    done
    
    error "Desktop environment not found: $1"
}

# Launch CLI tool
launch_tool() {
    local -a tools
    readarray -t tools < <(detect_tools)
    
    for tool in "${tools[@]}"; do
        local key="${tool%%:*}"
        local name=$(echo "$tool" | cut -d: -f2)
        local cmd=$(echo "$tool" | cut -d: -f3)
        
        if [ "$1" = "$key" ]; then
            log "Starting $name..."
            clear
            $cmd
            echo ""
            read -p "Press Enter to return to session manager..."
            exec "$0"
        fi
    done
    
    error "Tool not found: $1"
}

# System actions
launch_action() {
    case "$1" in
        R|r)
            log "Starting Recovery Wizard..."
            exec "${DOTFILES_DIR}/scripts/post-install/recovery-wizard.sh"
            ;;
        S|s)
            log "System Status:"
            echo ""
            uname -a
            echo ""
            uptime
            echo ""
            free -h
            echo ""
            df -h /
            echo ""
            read -p "Press Enter to continue..."
            exec "$0"
            ;;
        T|t)
            log "Telegram Setup..."
            "${DOTFILES_DIR}/scripts/utils/telegram/tele.sh" --setup
            read -p "Press Enter to continue..."
            exec "$0"
            ;;
        F|f)
            log "Switching to Fast Mode..."
            exec "${DOTFILES_DIR}/scripts/session-manager-fast"
            ;;
        M|m)
            log "Switching to Modular Mode..."
            exec "${DOTFILES_DIR}/scripts/session-manager-modular"
            ;;
        U|u)
            log "Switching to TUI Interface..."
            exec "${DOTFILES_DIR}/scripts/session-manager-tui.js"
            ;;
        B|b)
            show_system_scripts
            ;;
        I|i)
            log "Detailed System Information:"
            echo ""
            if command -v neofetch >/dev/null 2>&1; then
                neofetch
            else
                lscpu | head -10
            fi
            echo ""
            read -p "Press Enter to continue..."
            exec "$0"
            ;;
        *)
            error "Unknown action: $1"
            sleep 1
            exec "$0"
            ;;
    esac
}

# Show system scripts submenu
show_system_scripts() {
    clear
    echo "╔═══════════════════════════════════════════════════════════════════╗"
    echo "║                        SYSTEM SCRIPTS MENU                       ║"
    echo "╚═══════════════════════════════════════════════════════════════════╝"
    echo ""
    echo "System Scripts:"
    echo "  [1] Setup Swap Partition"
    echo "  [2] Install Zen Kernel"
    echo "  [3] Performance Tweaks"
    echo "  [4] AMD Optimization"
    echo "  [5] System Update"
    echo "  [6] Setup Cronie (Cron Jobs)"
    echo ""
    echo "Post-Install Scripts:"
    echo "  [7] Essential Apps"
    echo "  [8] Development Environment"
    echo "  [9] Study Setup"
    echo "  [A] Complete Wizard"
    echo ""
    echo "Utils:"
    echo "  [D] rclone Desktop Sync"
    echo "  [L] Manage Dotfiles Symlinks"
    echo ""
    echo "  [0] Back to Main Menu"
    echo ""
    
    read -p "Choose script: " choice
    
    case "$choice" in
        1) exec bash "${DOTFILES_DIR}/scripts/system/setup-swap.sh" ;;
        2) exec bash "${DOTFILES_DIR}/scripts/system/install-zen-kernel.sh" ;;
        3) exec bash "${DOTFILES_DIR}/scripts/system/performance-tweaks.sh" ;;
        4) exec bash "${DOTFILES_DIR}/scripts/system/amd-optimization.sh" ;;
        5) exec bash "${DOTFILES_DIR}/scripts/system/system-update.sh" ;;
        6) exec bash "${DOTFILES_DIR}/scripts/system/setup-cronie.sh" ;;
        7) exec bash "${DOTFILES_DIR}/scripts/post-install/essential-apps.sh" ;;
        8) exec bash "${DOTFILES_DIR}/scripts/post-install/dev-environment.sh" ;;
        9) exec bash "${DOTFILES_DIR}/scripts/post-install/study-setup.sh" ;;
        A|a) exec bash "${DOTFILES_DIR}/scripts/post-install/complete-wizard.sh" ;;
        D|d) exec bash "${DOTFILES_DIR}/scripts/utils/rclone-desktop-sync.sh" ;;
        L|l) exec bash "${DOTFILES_DIR}/scripts/utils/manage-dotfiles-symlinks.sh" ;;
        0) exec "$0" ;;
        *) 
            error "Invalid choice: $choice"
            sleep 1
            show_system_scripts
            ;;
    esac
}

# Show help
show_help() {
    clear
    echo "╔═══════════════════════════════════════════════════════════════════╗"
    echo "║                      SESSION MANAGER HELP                        ║"
    echo "╚═══════════════════════════════════════════════════════════════════╝"
    echo ""
    echo "Navigation:"
    echo "  Numbers 1-6      - Launch desktop environments"
    echo "  Letters c,t,b,r,v - Launch CLI tools"
    echo "  Capital Letters  - System actions"
    echo ""
    echo "Special Keys:"
    echo "  q               - Quit to shell"
    echo "  0               - Logout/shutdown menu"
    echo "  ?               - This help"
    echo ""
    echo "Session Manager Variants:"
    echo "  [F] Fast Mode    - Ultra-lightweight launcher"
    echo "  [M] Modular Mode - Performance optimized"
    echo "  [U] TUI Mode     - Blessed.js interface"
    echo ""
    echo "System Actions:"
    echo "  [R] Recovery Wizard - Post-reinstall system recovery"
    echo "  [T] Telegram Setup  - Configure telegram integration"
    echo "  [B] System Scripts  - Access all dotfiles scripts"
    echo "  [I] System Info     - Detailed system information"
    echo ""
    read -p "Press Enter to continue..."
    exec "$0"
}

# Handle user choices
handle_choice() {
    case "$1" in
        [1-6])
            launch_desktop "$1"
            ;;
        c|t|b|r|v)
            launch_tool "$1"
            ;;
        R|r|S|s|T|t|F|f|M|m|U|u|B|b|I|i)
            launch_action "$1"
            ;;
        q|Q)
            log "Returning to bash shell..."
            exec /bin/bash
            ;;
        0)
            log "Goodbye! 👋"
            exit 0
            ;;
        \?)
            show_help
            ;;
        *)
            error "Invalid choice: '$1'"
            sleep 1
            exec "$0"
            ;;
    esac
}

# Main function
main() {
    case "${1:-}" in
        --help)
            echo "Session Manager v$SESSION_MANAGER_VERSION"
            echo ""
            echo "Complete bash interface for desktop environments and system scripts."
            echo ""
            echo "Usage: $0 [option]"
            echo ""
            echo "Options:"
            echo "  --fast      Switch to ultra-fast launcher"
            echo "  --modular   Switch to modular launcher"
            echo "  --tui       Switch to blessed.js TUI"
            echo "  --help      Show this help"
            echo ""
            echo "Interactive mode: Run without arguments"
            exit 0
            ;;
        --fast)
            exec "${DOTFILES_DIR}/scripts/session-manager-fast" "${@:2}"
            ;;
        --modular)
            exec "${DOTFILES_DIR}/scripts/session-manager-modular" "${@:2}"
            ;;
        --tui)
            exec "${DOTFILES_DIR}/scripts/session-manager-tui.js" "${@:2}"
            ;;
        "")
            # Interactive mode
            ;;
        *)
            error "Unknown option: $1"
            echo "Use --help for available options"
            exit 1
            ;;
    esac
    
    # Interactive menu loop
    while true; do
        show_menu
        echo -n "Choose: "
        read choice
        handle_choice "$choice"
    done
}

# Run main function
main "$@"