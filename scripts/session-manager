#!/bin/bash

# Clean Session Manager - Hierarchical Design
# Part of nimmsel23's dotfiles system
# Usage: ./session-manager-clean.sh

# Source common functions with fallback
DOTFILES_DIR="${HOME}/.dotfiles"
if [ -f "${DOTFILES_DIR}/scripts/utils/common.sh" ]; then
    source "${DOTFILES_DIR}/scripts/utils/common.sh"
else
    # Minimal fallback functions
    log() { echo "[$(date +'%H:%M:%S')] $1"; }
    success() { echo "✅ $1"; }
    error() { echo "❌ $1"; }
    warning() { echo "⚠️  $1"; }
    command_exists() { command -v "$1" >/dev/null 2>&1; }
fi

# Configuration
CURRENT_MENU="main"
MENU_HISTORY=()

# Desktop environment detection
get_available_desktops() {
    local desktops=()
    
    command_exists startplasma-wayland && desktops+=("plasma:KDE Plasma")
    command_exists sway && desktops+=("sway:Sway")
    command_exists Hyprland && desktops+=("hyprland:Hyprland")
    command_exists cosmic-session && desktops+=("cosmic:COSMIC")
    command_exists startxfce4 && desktops+=("xfce:XFCE")
    command_exists i3 && desktops+=("i3:i3wm")
    
    printf '%s\n' "${desktops[@]}"
}

# Quick tools detection
get_available_tools() {
    local tools=()
    
    command_exists calcurse && tools+=("calcurse:Calendar")
    command_exists taskwarrior-tui && tools+=("tasks:Tasks")
    command_exists btop && tools+=("btop:System Monitor")
    command_exists ranger && tools+=("ranger:File Manager")
    command_exists nvim && tools+=("nvim:Text Editor")
    
    printf '%s\n' "${tools[@]}"
}

# Check script availability
script_exists() {
    [ -f "${DOTFILES_DIR}/scripts/$1" ]
}

# Launch desktop environment
launch_desktop() {
    local de="$1"
    
    case "$de" in
        plasma)
            log "Starting KDE Plasma..."
            export XDG_SESSION_TYPE=wayland
            exec startplasma-wayland
            ;;
        sway)
            log "Starting Sway..."
            export XDG_SESSION_TYPE=wayland
            exec sway
            ;;
        hyprland)
            log "Starting Hyprland..."
            export XDG_SESSION_TYPE=wayland
            exec Hyprland
            ;;
        cosmic)
            log "Starting COSMIC..."
            export XDG_SESSION_TYPE=wayland
            exec cosmic-session
            ;;
        xfce)
            log "Starting XFCE..."
            exec startxfce4
            ;;
        i3)
            log "Starting i3..."
            exec startx /usr/bin/i3
            ;;
        *)
            error "Unknown desktop environment: $de"
            return 1
            ;;
    esac
}

# Launch tool
launch_tool() {
    local tool="$1"
    
    case "$tool" in
        calcurse|tasks|btop|ranger|nvim)
            if command_exists "$tool"; then
                "$tool"
            else
                error "$tool not installed"
            fi
            ;;
        *)
            error "Unknown tool: $tool"
            return 1
            ;;
    esac
    
    read -p "Press Enter to return..."
    main
}

# Run system script safely
run_system_script() {
    local script="$1"
    local script_path="${DOTFILES_DIR}/scripts/system/${script}.sh"
    
    if [ -f "$script_path" ]; then
        log "Running: $script"
        bash "$script_path"
    else
        error "Script not found: $script"
        echo "Available scripts:"
        ls -1 "${DOTFILES_DIR}/scripts/system/" 2>/dev/null | grep "\.sh$" | sed 's/\.sh$//' | head -5
    fi
    
    read -p "Press Enter to return..."
    main
}

# Main menu
show_main_menu() {
    clear
    echo "Session Manager"
    echo "==============="
    echo ""
    
    # Desktop environments
    local desktops=($(get_available_desktops))
    if [ ${#desktops[@]} -gt 0 ]; then
        echo "Launch Desktop:"
        local i=1
        for desktop in "${desktops[@]}"; do
            local de_id="${desktop%%:*}"
            local de_name="${desktop#*:}"
            echo "  [$i] $de_name"
            ((i++))
        done
        echo ""
    fi
    
    # Main categories
    echo "System Management:"
    echo "  [s] System Tools"
    echo "  [t] Quick Tools"
    echo ""
    echo "Other:"
    echo "  [i] System Info"
    echo "  [0] Exit"
    echo ""
}

# System tools menu
show_system_menu() {
    clear
    echo "System Tools"
    echo "============"
    echo ""
    
    # Hardware & Performance
    echo "Hardware & Performance:"
    if script_exists "system/performance-tweaks-safe.sh"; then
        echo "  [p] Performance Tweaks (Safe)"
    fi
    if script_exists "system/wifi-power-fix.sh"; then
        echo "  [w] WiFi Power Fix"
    fi
    if script_exists "system/install-zen-kernel.sh"; then
        echo "  [z] Install Zen Kernel"
    fi
    echo ""
    
    # Network & Connectivity
    echo "Network & Connectivity:"
    if script_exists "system/ssh-tailscale-setup.sh"; then
        echo "  [n] SSH + Tailscale Setup"
    fi
    echo ""
    
    # Maintenance
    echo "Maintenance:"
    if script_exists "system/system-update.sh"; then
        echo "  [u] System Update"
    fi
    if script_exists "system/systemd-timer-manager.sh"; then
        echo "  [m] Timer Manager"
    fi
    echo ""
    
    echo "  [b] Back to Main Menu"
    echo "  [0] Exit"
    echo ""
}

# Quick tools menu  
show_tools_menu() {
    clear
    echo "Quick Tools"
    echo "==========="
    echo ""
    
    local tools=($(get_available_tools))
    if [ ${#tools[@]} -gt 0 ]; then
        local i=1
        for tool in "${tools[@]}"; do
            local tool_id="${tool%%:*}"
            local tool_name="${tool#*:}"
            echo "  [$i] $tool_name"
            ((i++))
        done
    else
        echo "No quick tools installed."
        echo "Install with: yay -S calcurse taskwarrior-tui btop ranger neovim"
    fi
    
    echo ""
    echo "  [b] Back to Main Menu"
    echo "  [0] Exit"
    echo ""
}

# Handle main menu choice
handle_main_choice() {
    local choice="$1"
    local desktops=($(get_available_desktops))
    
    case "$choice" in
        [1-9])
            local index=$((choice - 1))
            if [ $index -lt ${#desktops[@]} ]; then
                local desktop="${desktops[$index]}"
                local de_id="${desktop%%:*}"
                launch_desktop "$de_id"
            else
                error "Invalid desktop choice"
                return 1
            fi
            ;;
        s)
            CURRENT_MENU="system"
            ;;
        t)
            CURRENT_MENU="tools"
            ;;
        i)
            show_system_info
            read -p "Press Enter to continue..."
            ;;
        0)
            log "Goodbye!"
            exit 0
            ;;
        *)
            error "Invalid choice: $choice"
            return 1
            ;;
    esac
}

# Handle system menu choice
handle_system_choice() {
    local choice="$1"
    
    case "$choice" in
        p)
            run_system_script "performance-tweaks-safe"
            ;;
        w)
            run_system_script "wifi-power-fix"
            ;;
        z)
            run_system_script "install-zen-kernel"
            ;;
        n)
            run_system_script "ssh-tailscale-setup"
            ;;
        u)
            run_system_script "system-update"
            ;;
        m)
            run_system_script "systemd-timer-manager"
            ;;
        b)
            CURRENT_MENU="main"
            ;;
        0)
            exit 0
            ;;
        *)
            error "Invalid choice: $choice"
            return 1
            ;;
    esac
}

# Handle tools menu choice
handle_tools_choice() {
    local choice="$1"
    local tools=($(get_available_tools))
    
    case "$choice" in
        [1-9])
            local index=$((choice - 1))
            if [ $index -lt ${#tools[@]} ]; then
                local tool="${tools[$index]}"
                local tool_id="${tool%%:*}"
                launch_tool "$tool_id"
            else
                error "Invalid tool choice"
                return 1
            fi
            ;;
        b)
            CURRENT_MENU="main"
            ;;
        0)
            exit 0
            ;;
        *)
            error "Invalid choice: $choice"
            return 1
            ;;
    esac
}

# Show system info
show_system_info() {
    clear
    echo "System Information"
    echo "=================="
    
    if command_exists neofetch; then
        neofetch
    else
        echo "Hostname: $(hostname)"
        echo "Kernel: $(uname -r)"
        echo "Uptime: $(uptime -p 2>/dev/null || uptime)"
        
        if command_exists free; then
            echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
        fi
        
        if lspci | grep -i vga >/dev/null 2>&1; then
            echo "GPU: $(lspci | grep -i vga | cut -d: -f3 | head -1 | xargs)"
        fi
    fi
    
    echo ""
}

# Main program loop
main() {
    while true; do
        case "$CURRENT_MENU" in
            main)
                show_main_menu
                read -p "Choose: " choice
                handle_main_choice "$choice"
                ;;
            system)
                show_system_menu
                read -p "Choose: " choice
                handle_system_choice "$choice"
                ;;
            tools)
                show_tools_menu
                read -p "Choose: " choice
                handle_tools_choice "$choice"
                ;;
            *)
                error "Unknown menu state: $CURRENT_MENU"
                CURRENT_MENU="main"
                ;;
        esac
        
        # Brief pause to show any error messages
        sleep 0.5
    done
}

# Run main program
main