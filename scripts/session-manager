#!/bin/bash

# TTY Session Manager - Simplified Desktop Launcher + Script Menu
# Modular approach - individual scripts for complex operations

# Source common functions
DOTFILES_DIR="${HOME}/.dotfiles"
if [ -f "${DOTFILES_DIR}/scripts/utils/common.sh" ]; then
    source "${DOTFILES_DIR}/scripts/utils/common.sh"
else
    # Fallback color definitions if common.sh not available
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
    
    log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
    success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
    error() { echo -e "${RED}‚ùå $1${NC}"; }
    warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detect available desktop environments
detect_desktops() {
    local -a desktops=()
    
    if command_exists startplasma-wayland; then
        desktops+=("1:KDE Plasma (Wayland)")
    fi
    
    if command_exists sway; then
        if command_exists nwg-panel; then
            desktops+=("2:Sway + nwg-shell")
        else
            desktops+=("2:Sway (Pure)")
        fi
    fi
    
    if command_exists Hyprland; then
        desktops+=("3:Hyprland")
    fi
    
    if command_exists cosmic-session; then
        desktops+=("4:COSMIC Desktop")
    fi
    
    if command_exists startxfce4; then
        desktops+=("5:LXFCE")
    fi
    
    if command_exists i3; then
        desktops+=("6:i3 (X11 fallback)")
    fi
    
    for desktop in "${desktops[@]}"; do
        echo "$desktop"
    done
}

# Detect available CLI tools
detect_tools() {
    local -a tools=()
    
    if command_exists calcurse; then
        tools+=("c:Calendar (calcurse)")
    fi
    
    if command_exists taskwarrior-tui; then
        tools+=("t:Tasks (taskwarrior-tui)")
    fi
    
    if command_exists btop; then
        tools+=("b:System Monitor (btop)")
    elif command_exists htop; then
        tools+=("h:System Monitor (htop)")
    fi
    
    if command_exists ranger; then
        tools+=("r:File Manager (ranger)")
    fi
    
    if command_exists nvim; then
        tools+=("v:Neovim")
    fi
    
    for tool in "${tools[@]}"; do
        echo "$tool"
    done
}

# Launch desktop environment
launch_desktop() {
    local choice="$1"
    
    case "$choice" in
        1)
            if command_exists startplasma-wayland; then
                log "Starting KDE Plasma (Wayland)..."
                export XDG_SESSION_TYPE=wayland
                export QT_QPA_PLATFORM=wayland
                exec startplasma-wayland
            else
                error "KDE Plasma not found"
                return 1
            fi
            ;;
        2)
            if command_exists sway; then
                log "Starting Sway..."
                export XDG_SESSION_TYPE=wayland
                if command_exists nwg-panel && [ -f ~/.config/nwg-shell/sway/config ]; then
                    exec sway -c ~/.config/nwg-shell/sway/config
                else
                    exec sway
                fi
            else
                error "Sway not found"
                return 1
            fi
            ;;
        3)
            if command_exists Hyprland; then
                log "Starting Hyprland..."
                export XDG_SESSION_TYPE=wayland
                exec Hyprland
            else
                error "Hyprland not found"
                return 1
            fi
            ;;
        4)
            if command_exists cosmic-session; then
                log "Starting COSMIC Desktop..."
                export XDG_SESSION_TYPE=wayland
                exec cosmic-session
            else
                error "COSMIC not found"
                return 1
            fi
            ;;
        5)
            if command_exists startxfce4; then
                log "Starting LXFCE..."
                if command_exists lxfce-wayland-session; then
                    export XDG_SESSION_TYPE=wayland
                    exec lxfce-wayland-session
                else
                    warning "Falling back to X11..."
                    exec startx /usr/bin/startxfce4
                fi
            else
                error "LXFCE not found"
                return 1
            fi
            ;;
        6)
            if command_exists i3; then
                log "Starting i3 (X11 fallback)..."
                warning "Consider using Sway for Wayland"
                exec startx /usr/bin/i3
            else
                error "i3 not found"
                return 1
            fi
            ;;
        *)
            error "Invalid desktop choice: $choice"
            return 1
            ;;
    esac
}

# Launch CLI tool
launch_tool() {
    local choice="$1"
    
    case "$choice" in
        c)
            if command_exists calcurse; then
                calcurse
            else
                error "calcurse not installed"
            fi
            ;;
        t)
            if command_exists taskwarrior-tui; then
                taskwarrior-tui
            else
                error "taskwarrior-tui not installed"
            fi
            ;;
        b)
            if command_exists btop; then
                btop
            else
                error "btop not installed"
            fi
            ;;
        h)
            if command_exists htop; then
                htop
            else
                error "htop not installed"
            fi
            ;;
        r)
            if command_exists ranger; then
                ranger
            else
                error "ranger not installed"
            fi
            ;;
        v)
            if command_exists nvim; then
                nvim
            else
                error "neovim not installed"
            fi
            ;;
        *)
            error "Invalid tool choice: $choice"
            return 1
            ;;
    esac
    
    # Return to menu after tool exits
    read -p "Press Enter to return to session manager..."
    exec "$0"
}

# Run system script
run_script() {
    local script="$1"
    local script_path="${DOTFILES_DIR}/scripts/${script}"
    
    if [ -f "$script_path" ]; then
        log "Running script: $script"
        bash "$script_path"
        
        # Return to menu after script completes
        read -p "Press Enter to return to session manager..."
        exec "$0"
    else
        error "Script not found: $script_path"
        echo "Install dotfiles with: curl -fsSL https://raw.githubusercontent.com/nimmsel23/dotfiles/main/install.sh | bash"
        read -p "Press Enter to continue..."
        exec "$0"
    fi
}

# Show main menu
show_menu() {
    clear
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üñ•Ô∏è  TTY SESSION MANAGER"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
    
    # Desktop Environments
    local -a desktops
    readarray -t desktops < <(detect_desktops)
    
    if [ ${#desktops[@]} -gt 0 ]; then
        echo "üè† Desktop Environments:"
        for desktop in "${desktops[@]}"; do
            local num="${desktop%%:*}"
            local name="${desktop#*:}"
            echo "  [$num] $name"
        done
        echo ""
    fi
    
    # CLI Tools
    local -a tools
    readarray -t tools < <(detect_tools)
    
    if [ ${#tools[@]} -gt 0 ]; then
        echo "üõ†Ô∏è  Quick CLI Tools:"
        for tool in "${tools[@]}"; do
            local key="${tool%%:*}"
            local name="${tool#*:}"
            echo "  [$key] $name"
        done
        echo ""
    fi
    
    # System Scripts
    echo "üîß System Scripts:"
    echo "  [sw] Setup Swap Partition"
    echo "  [zk] Install Zen Kernel"  
    echo "  [pt] Performance Tweaks"
    echo "  [ag] AMD GPU Optimization"
    echo "  [up] System Update"
    echo ""
    
    # Post-Install Scripts
    echo "üèóÔ∏è  Setup Scripts:"
    echo "  [ea] Essential Apps"
    echo "  [de] Development Environment"
    echo "  [st] Study Environment"
    echo "  [mm] Multimedia Codecs"
    echo "  [wi] Complete Wizard"
    echo ""
    
    # System Options
    echo "‚öôÔ∏è  System:"
    echo "  [f] Fish Shell"
    echo "  [z] Zsh Shell"
    echo "  [i] System Info"
    echo ""
    
    echo "  [0] Exit"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# Handle user choice
handle_choice() {
    local choice="$1"
    
    case "$choice" in
        # Desktop environments (numeric)
        [1-6])
            launch_desktop "$choice"
            ;;
            
        # CLI tools (single letters)
        c|t|b|h|r|v)
            launch_tool "$choice"
            ;;
            
        # System scripts
        sw)
            run_script "system/setup-swap.sh"
            ;;
        zk)
            run_script "system/install-zen-kernel.sh"
            ;;
        pt)
            run_script "system/performance-tweaks.sh"
            ;;
        ag)
            run_script "system/amd-optimization.sh"
            ;;
        up)
            run_script "system/system-update.sh"
            ;;
            
        # Post-install scripts
        ea)
            run_script "post-install/essential-apps.sh"
            ;;
        de)
            run_script "post-install/dev-environment.sh"
            ;;
        st)
            run_script "post-install/study-setup.sh"
            ;;
        mm)
            run_script "post-install/multimedia.sh"
            ;;
        wi)
            run_script "post-install/complete-wizard.sh"
            ;;
            
        # System options
        f)
            log "Starting Fish Shell..."
            exec fish
            ;;
        z)
            log "Starting Zsh Shell..."
            exec zsh
            ;;
        i)
            echo "üìã System Information:"
            echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            if command_exists neofetch; then
                neofetch
            else
                echo "Hostname: $(hostname)"
                echo "Kernel: $(uname -r)"
                echo "Uptime: $(uptime -p)"
                echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
                echo "GPU: $(lspci | grep -i vga | cut -d: -f3 | head -1)"
            fi
            echo ""
            read -p "Press Enter to continue..."
            exec "$0"
            ;;
            
        # Exit
        0)
            log "Goodbye!"
            exit 0
            ;;
            
        # Invalid choice
        *)
            error "Invalid choice: '$choice'"
            sleep 1
            exec "$0"
            ;;
    esac
}

# Main execution
main() {
    show_menu
    echo -n "Choose: "
    read choice
    handle_choice "$choice"
}

# Run main function
main