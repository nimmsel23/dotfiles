#!/bin/bash

# Modular Session Manager v4.0 - Performance Optimized
# Fast loading with on-demand module system

# Configuration
DOTFILES_DIR="${HOME}/.dotfiles"
SESSION_MANAGER_VERSION="4.0-MODULAR"

# Source common functions (lightweight)
if [ -f "${DOTFILES_DIR}/scripts/utils/common.sh" ]; then
    source "${DOTFILES_DIR}/scripts/utils/common.sh"
else
    # Fallback minimal functions
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    NC='\033[0m'
    
    log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
    success() { echo -e "${GREEN}✅ $1${NC}"; }
    error() { echo -e "${RED}❌ $1${NC}"; }
fi

# Fast desktop environment detection
detect_desktops() {
    local -a desktops=()
    
    command_exists() { command -v "$1" >/dev/null 2>&1; }
    
    command_exists startplasma-wayland && desktops+=("1:KDE Plasma (Wayland)")
    command_exists sway && desktops+=("2:Sway")
    command_exists Hyprland && desktops+=("3:Hyprland")
    command_exists cosmic-session && desktops+=("4:COSMIC Desktop")
    command_exists startxfce4 && desktops+=("5:XFCE")
    command_exists i3 && desktops+=("6:i3")
    
    printf '%s\n' "${desktops[@]}"
}

# Fast CLI tools detection
detect_tools() {
    local -a tools=()
    
    command_exists calcurse && tools+=("c:Calendar (calcurse)")
    command_exists taskwarrior-tui && tools+=("t:Tasks")
    command_exists btop && tools+=("b:System Monitor (btop)")
    command_exists ranger && tools+=("r:File Manager (ranger)")
    
    printf '%s\n' "${tools[@]}"
}

# Show main menu (fast version)
show_menu() {
    clear
    
    echo "╔═══════════════════════════════════════════════╗"
    echo "║    🚀 MODULAR SESSION MANAGER v$SESSION_MANAGER_VERSION    ║"
    echo "║          ⚡ Optimized for Speed ⚡           ║"
    echo "╚═══════════════════════════════════════════════╝"
    echo ""
    
    # Desktop Environments
    local -a desktops
    readarray -t desktops < <(detect_desktops)
    
    if [ ${#desktops[@]} -gt 0 ]; then
        echo "🏠 Desktop Environments:"
        for desktop in "${desktops[@]}"; do
            local num="${desktop%%:*}"
            local name="${desktop#*:}"
            echo "  [$num] $name"
        done
        echo ""
    fi
    
    # CLI Tools
    local -a tools
    readarray -t tools < <(detect_tools)
    
    if [ ${#tools[@]} -gt 0 ]; then
        echo "🛠️  CLI Tools:"
        for tool in "${tools[@]}"; do
            local key="${tool%%:*}"
            local name="${tool#*:}"
            echo "  [$key] $name"
        done
        echo ""
    fi
    
    # Extended Features (loaded on-demand)
    echo "🔧 Extended Features:"
    echo "  [ext] 📜 System Scripts (load full menu)"
    echo "  [api] 🌈 JSON API Interface"
    echo "  [restore] 🛸 Post-Reinstall Recovery Wizard"
    echo "  [fast] ⚡ Switch to ultra-fast launcher"
    echo ""
    
    echo "┌─────────────────────────────────────────────────┐"
    echo "│  [q] ← Exit to bash    [0] Logout               │"
    echo "└─────────────────────────────────────────────────┘"
    echo ""
    
    echo "💡 Fast startup! Extended features load only when needed"
}

# Launch desktop environment (optimized)
launch_desktop() {
    case "$1" in
        1)
            if command_exists startplasma-wayland; then
                log "Starting KDE Plasma (Wayland)..."
                export XDG_SESSION_TYPE=wayland
                export QT_QPA_PLATFORM=wayland
                exec startplasma-wayland
            fi
            ;;
        2)
            if command_exists sway; then
                log "Starting Sway..."
                export XDG_SESSION_TYPE=wayland
                exec sway
            fi
            ;;
        3)
            if command_exists Hyprland; then
                log "Starting Hyprland..."
                export XDG_SESSION_TYPE=wayland
                exec Hyprland
            fi
            ;;
        4)
            if command_exists cosmic-session; then
                log "Starting COSMIC Desktop..."
                export XDG_SESSION_TYPE=wayland
                exec cosmic-session
            fi
            ;;
        5)
            if command_exists startxfce4; then
                log "Starting XFCE..."
                export XDG_SESSION_TYPE=x11
                exec startx /usr/bin/startxfce4
            fi
            ;;
        6)
            if command_exists i3; then
                log "Starting i3..."
                export XDG_SESSION_TYPE=x11
                exec startx /usr/bin/i3
            fi
            ;;
        *)
            error "Desktop environment not available"
            return 1
            ;;
    esac
}

# Launch CLI tools
launch_tool() {
    case "$1" in
        c)
            command_exists calcurse && { clear; calcurse; }
            ;;
        t)
            command_exists taskwarrior-tui && { clear; taskwarrior-tui; }
            ;;
        b)
            command_exists btop && { clear; btop; }
            ;;
        r)
            command_exists ranger && { clear; ranger; }
            ;;
        *)
            error "Tool not available: $1"
            return 1
            ;;
    esac
    
    read -p "Press Enter to return..."
    exec "$0"
}

# Handle user choices
handle_choice() {
    case "$1" in
        [1-6])
            launch_desktop "$1"
            ;;
        c|t|b|r)
            launch_tool "$1"
            ;;
        ext)
            log "Loading full session manager..."
            exec "${DOTFILES_DIR}/scripts/session-manager"
            ;;
        restore)
            log "🛸 Starting Recovery Wizard..."
            exec "${DOTFILES_DIR}/scripts/post-install/recovery-wizard.sh"
            ;;
        api)
            log "Loading JSON API module..."
            if [ -f "${DOTFILES_DIR}/scripts/modules/json-api.sh" ]; then
                echo ""
                echo "JSON API Module loaded. Available commands:"
                echo "  bash ${DOTFILES_DIR}/scripts/modules/json-api.sh --status"
                echo "  bash ${DOTFILES_DIR}/scripts/modules/json-api.sh --desktops"
                echo "  bash ${DOTFILES_DIR}/scripts/modules/json-api.sh --benchmark"
                echo ""
                read -p "Press Enter to continue..."
            else
                error "JSON API module not found"
                read -p "Press Enter to continue..."
            fi
            exec "$0"
            ;;
        fast)
            log "Switching to ultra-fast launcher..."
            exec "${DOTFILES_DIR}/scripts/session-manager-fast"
            ;;
        q)
            log "Returning to bash shell..."
            exec /bin/bash
            ;;
        0)
            log "Goodbye! 👋"
            exit 0
            ;;
        *)
            error "Invalid choice: '$1'"
            sleep 1
            exec "$0"
            ;;
    esac
}

# Main function
main() {
    case "${1:-}" in
        --help)
            echo "Modular Session Manager v$SESSION_MANAGER_VERSION"
            echo ""
            echo "Performance optimized session manager with modular loading."
            echo ""
            echo "Usage: $0 [option]"
            echo ""
            echo "Options:"
            echo "  --fast      Switch to ultra-fast launcher"
            echo "  --api       Load JSON API module"
            echo "  --restore   🛸 Post-Reinstall Recovery Wizard"
            echo "  --full      Load complete session manager"
            echo "  --help      Show this help"
            echo ""
            echo "Interactive mode: Run without arguments"
            exit 0
            ;;
        --fast)
            exec "${DOTFILES_DIR}/scripts/session-manager-fast" "${@:2}"
            ;;
        --api)
            exec "${DOTFILES_DIR}/scripts/modules/json-api.sh" "${@:2}"
            ;;
        --restore)
            exec "${DOTFILES_DIR}/scripts/post-install/recovery-wizard.sh" "${@:2}"
            ;;
        --full)
            exec "${DOTFILES_DIR}/scripts/session-manager" "${@:2}"
            ;;
        "")
            # Interactive mode
            ;;
        *)
            error "Unknown option: $1"
            echo "Use --help for available options"
            exit 1
            ;;
    esac
    
    # Interactive menu loop
    while true; do
        show_menu
        echo -n "⚡ Choose: "
        read choice
        handle_choice "$choice"
    done
}

# Run main function
main "$@"